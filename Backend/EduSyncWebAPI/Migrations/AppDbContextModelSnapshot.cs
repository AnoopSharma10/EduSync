// <auto-generated />
using System;
using EduSyncWebAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EduSyncWebAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EduSyncWebAPI.Models.Assessment", b =>
                {
                    b.Property<Guid>("AssessmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<Guid?>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("MaxScore")
                        .HasColumnType("int");

                    b.Property<string>("Questions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("AssessmentId");

                    b.HasIndex("CourseId");

                    b.ToTable("Assessment", (string)null);
                });

            modelBuilder.Entity("EduSyncWebAPI.Models.Course", b =>
                {
                    b.Property<Guid>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<Guid?>("InstructorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MediaUrl")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("CourseId");

                    b.HasIndex("InstructorId");

                    b.ToTable("Course", (string)null);
                });

            modelBuilder.Entity("EduSyncWebAPI.Models.Result", b =>
                {
                    b.Property<Guid>("ResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<Guid?>("AssessmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly?>("AttemptDate")
                        .HasColumnType("date");

                    b.Property<int?>("Score")
                        .HasColumnType("int");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ResultId");

                    b.HasIndex("AssessmentId");

                    b.HasIndex("UserId");

                    b.ToTable("Result", (string)null);
                });

            modelBuilder.Entity("EduSyncWebAPI.Models.UserModel", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<string>("Email")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Role")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("UserId");

                    b.HasIndex(new[] { "Email" }, "UQ_UserModel_Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.ToTable("UserModel", (string)null);
                });

            modelBuilder.Entity("EduSyncWebAPI.Models.Assessment", b =>
                {
                    b.HasOne("EduSyncWebAPI.Models.Course", "Course")
                        .WithMany("Assessments")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK_Assessment_Course");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("EduSyncWebAPI.Models.Course", b =>
                {
                    b.HasOne("EduSyncWebAPI.Models.UserModel", "Instructor")
                        .WithMany("Courses")
                        .HasForeignKey("InstructorId")
                        .HasConstraintName("FK_Course_UserModel1");

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("EduSyncWebAPI.Models.Result", b =>
                {
                    b.HasOne("EduSyncWebAPI.Models.Assessment", "Assessment")
                        .WithMany("Results")
                        .HasForeignKey("AssessmentId")
                        .HasConstraintName("FK_Result_Assessment");

                    b.HasOne("EduSyncWebAPI.Models.UserModel", "User")
                        .WithMany("Results")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Result_UserModel");

                    b.Navigation("Assessment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EduSyncWebAPI.Models.Assessment", b =>
                {
                    b.Navigation("Results");
                });

            modelBuilder.Entity("EduSyncWebAPI.Models.Course", b =>
                {
                    b.Navigation("Assessments");
                });

            modelBuilder.Entity("EduSyncWebAPI.Models.UserModel", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("Results");
                });
#pragma warning restore 612, 618
        }
    }
}
